import React, { useState, useEffect } from 'react'
import { Block, Section } from '@/lib/document-model'
import { detectChartSuggestionsFromDocument, ChartSuggestion, createChartFromSuggestion } from '@/lib/chart-suggestion-detector'
import { ChartSuggestionPanel } from './ChartSuggestionPanel'
import { BlockRenderer } from './BlockRenderer'
import { toast } from 'sonner'

interface TableWithChartSuggestionsProps {
  block: Block
  sections: Section[]
  onUpdate?: (block: Block) => void
  onInsertChart?: (chartBlock: Block, afterBlockId: string) => void
  className?: string
}

export const TableWithChartSuggestions = ({
  block,
  sections,
  onUpdate,
  onInsertChart,
  className = ''
}: TableWithChartSuggestionsProps) => {
  const [suggestions, setSuggestions] = useState<ChartSuggestion[]>([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [hasCheckedSuggestions, setHasCheckedSuggestions] = useState(false)

  useEffect(() => {
    // Only check for suggestions once for this table
    if (block.type === 'table' && !hasCheckedSuggestions) {
      setHasCheckedSuggestions(true)
      
      // Detect chart suggestions for this specific table
      const allSuggestions = detectChartSuggestionsFromDocument(sections)
      const tableSuggestions = allSuggestions.get(block.id) || []
      
      setSuggestions(tableSuggestions)
      setShowSuggestions(tableSuggestions.length > 0)
    }
  }, [block, sections, hasCheckedSuggestions])

  const handleInsertChart = async (suggestion: ChartSuggestion, caption: string, altText: string) => {
    try {
      // Create chart block from suggestion
      const chartBlock = createChartFromSuggestion(suggestion, block.content, caption, altText)
      
      // Convert to document model format
      const documentChartBlock: Block = {
        id: chartBlock.id,
        type: 'chart',
        content: chartBlock.content,
        order: block.order + 1,
        metadata: {
          sourceTableId: suggestion.sourceTableId,
          autoGenerated: true,
          chartType: suggestion.chartType
        }
      }

      // Insert chart after the table
      if (onInsertChart) {
        onInsertChart(documentChartBlock, block.id)
      }
      
      // Hide suggestions after successful insertion
      setShowSuggestions(false)
      
      toast.success(`${suggestion.title} inserted successfully`)
    } catch (error) {
      console.error('Failed to insert chart:', error)
      toast.error('Failed to insert chart. Please try again.')
    }
  }

  const handleDismissSuggestions = () => {
    setShowSuggestions(false)
    // Don't check suggestions again for this table
    setSuggestions([])
  }

  if (block.type !== 'table') {
    return <BlockRenderer block={block} className={className} />
  }

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Render the table */}
      <BlockRenderer 
        block={block} 
        className="table-with-suggestions" 
      />
      
      {/* Show chart suggestions if available */}
      {showSuggestions && suggestions.length > 0 && (
        <ChartSuggestionPanel
          suggestions={suggestions}
          sourceTable={block}
          onInsertChart={handleInsertChart}
          onDismiss={handleDismissSuggestions}
          className="mt-3"
        />
      )}
    </div>
  )
}

export default TableWithChartSuggestions