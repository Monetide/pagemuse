import React, { useState, useEffect } from 'react'
import { Block, Section, SemanticDocument } from '@/lib/document-model'
import { detectChartSuggestionsFromDocument, ChartSuggestion, createChartFromSuggestion } from '@/lib/chart-suggestion-detector'
import { ChartSuggestionPanel } from './ChartSuggestionPanel'
import { BlockRenderer } from './BlockRenderer'
import { toast } from 'sonner'

interface EditableBlockWithChartSuggestionsProps {
  block: Block
  document?: SemanticDocument | null
  isSelected?: boolean
  isEditing?: boolean
  showInvisibles?: boolean
  onSelect?: (blockId: string) => void
  onContentChange?: (blockId: string, newContent: any) => void
  onInsertChart?: (chartBlock: Block, afterBlockId: string) => void
  onBlockAction?: (action: string, blockId: string, data?: any) => void
  className?: string
}

export const EditableBlockWithChartSuggestions = ({
  block,
  document,
  isSelected,
  isEditing,
  showInvisibles,
  onSelect,
  onContentChange,
  onInsertChart,
  onBlockAction,
  className = ''
}: EditableBlockWithChartSuggestionsProps) => {
  const [suggestions, setSuggestions] = useState<ChartSuggestion[]>([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [hasCheckedSuggestions, setHasCheckedSuggestions] = useState(false)

  useEffect(() => {
    // Only check for suggestions on tables that haven't been checked yet
    if (block.type === 'table' && !hasCheckedSuggestions && document) {
      setHasCheckedSuggestions(true)
      
      try {
        // Detect chart suggestions for this specific table
        const allSuggestions = detectChartSuggestionsFromDocument(document.sections)
        const tableSuggestions = allSuggestions.get(block.id) || []
        
        setSuggestions(tableSuggestions)
        
        // Only show suggestions if we found good quality ones and the block is selected
        if (tableSuggestions.length > 0 && tableSuggestions.some(s => s.confidence >= 0.6)) {
          setShowSuggestions(true)
        }
      } catch (error) {
        console.error('Failed to detect chart suggestions:', error)
      }
    }
  }, [block, document, hasCheckedSuggestions, isSelected])

  // Show/hide suggestions based on selection
  useEffect(() => {
    if (block.type === 'table' && suggestions.length > 0) {
      setShowSuggestions(isSelected || false)
    }
  }, [isSelected, block.type, suggestions.length])

  const handleInsertChart = async (suggestion: ChartSuggestion, caption: string, altText: string) => {
    try {
      // Create chart block from suggestion
      const chartBlock = createChartFromSuggestion(suggestion, block.content, caption, altText)
      
      // Convert to document model format
      const documentChartBlock: Block = {
        id: chartBlock.id,
        type: 'chart',
        content: chartBlock.content,
        order: block.order + 1,
        metadata: {
          sourceTableId: suggestion.sourceTableId,
          autoGenerated: true,
          chartType: suggestion.chartType,
          createdAt: new Date().toISOString()
        }
      }

      // Insert chart after the table
      if (onInsertChart) {
        onInsertChart(documentChartBlock, block.id)
      } else if (onBlockAction) {
        onBlockAction('insert-after', block.id, documentChartBlock)
      }
      
      // Hide suggestions after successful insertion
      setShowSuggestions(false)
      
      toast.success(`${suggestion.title} inserted successfully`)
    } catch (error) {
      console.error('Failed to insert chart:', error)
      toast.error('Failed to insert chart. Please try again.')
    }
  }

  const handleDismissSuggestions = () => {
    setShowSuggestions(false)
    // Mark this table as having dismissed suggestions
    if (onBlockAction) {
      onBlockAction('dismiss-chart-suggestions', block.id)
    }
  }

  return (
    <div className={`relative ${className}`}>
      {/* Render the original block */}
      <BlockRenderer
        block={block}
        document={document}
        className="block-with-chart-suggestions"
      />
      
      {/* Show chart suggestions for selected tables */}
      {block.type === 'table' && showSuggestions && suggestions.length > 0 && isSelected && (
        <div className="mt-3">
          <ChartSuggestionPanel
            suggestions={suggestions}
            sourceTable={block}
            onInsertChart={handleInsertChart}
            onDismiss={handleDismissSuggestions}
          />
        </div>
      )}
    </div>
  )
}

export default EditableBlockWithChartSuggestions